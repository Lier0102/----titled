{
  "blog_url": "https://stackframe.tistory.com",
  "blog_info": {
    "title": "stackframe",
    "description": "",
    "total_posts": 43,
    "categories": [
      "Linux",
      "PostgreSQL",
      "RaspberryPi",
      "PHP",
      "Blender",
      "SQL",
      "Network",
      "Security"
    ]
  },
  "analyzed_at": "2025-07-16T11:23:44.411742",
  "total_posts_found": 24,
  "analyzed_posts": 15,
  "posts": [
    {
      "url": "https://stackframe.tistory.com/40",
      "title": "stackframe",
      "content": "앞으로 티스토리 대신 blog.stackframe.dev에서 블로깅을 합니다. 이 블로그는 남겨 둘 예정입니다.\n\n\n\n갑자기 문득 네이버 클라우드 플랫폼과 구글 클라우드 플랫폼의 서버/VM 인스턴스의 인터넷 네트워크 대역폭이 어느정도 되는지 궁금하여 실험해봤습니다. 처음에는 제 컴퓨터와 각각 iperf3로 대역폭을 측정해봤으나 제 인터넷 계약이 500Mbps이고 둘 다 그걸 뛰어넘는 대역폭을 가지고 있어서 제대로 측정이 되지 않았습니다. 그래서 서로 iperf3를 실행하여 측정해봤습니다.\n \n먼저 네이버 클라우드 플랫폼의 Sever는 아래와 같이 정했습니다.\n한국 리전\ng2 standard vCPU 4개, 16GB RAM\nSSD 50GB\nCentOS 7.8 64bit\n \n구글 클라우드 플랫폼의 VM 인스턴스는 아래와 같습니다.\n한국 서울 리전\ne2-standard-4(vCPU 4개, 16GB RAM)\n20GB\nCentOS 8 64bit\n \n네트워크 대역폭 측정이기에 내부저장공간은 실험에 영향이 없을거라 생각됩니다.\n \n구글 클라우드 플랫폼에서 iperf3 서버를 실행하고 네이버 클라우드 플랫폼에서 클라이언트로 연결했습니다.\n \n\n\n \n그 결과 1Gbps에 달하는 대역폭이 측정되었습니다.\n참고로 네이버 클라우드 플랫폼의 Server에 공인 IP를 할당하였습니다. 왜 그런지 모르겠지만 공인 IP를 할당하지 않고 iperf3를 실행하였더니 300Mbps 정도밖에 측정되지 않았습니다.\n \n어쨌든 이 결과를 보니 둘 다 적어도 외부망이 1Gbps의 대역폭을 지원한다는 것을 알 수 있었습니다.\n \n여담으로 네이버 클라우드에서 실수로 월정액으로 서버를 생성했다가 바로 삭제했는데 이게 요금 청구가 될 지 모르겠습니다. 역시 뭔가를 만질 때는 꼼꼼히 읽어보고 해야합니다. 네이버 클라우드는 실시간 예상 요금을 볼 수 없어서 좀 아쉽습니다.\n\n\n\n\n\n\n\n\n\n\n공유하기\n\n게시글 관리\n\n\nstackframe \n\n\n저작자표시 비영리\n\n(새창열림)\n\n\n \n\n\n\n'Network' 카테고리의 다른 글\n\n\ntunnelbroker.net으로 공인 IPv6 할당받기  (1)\n2020.05.01\n\n\nMAC 주소 추적의 진실  (1)\n2019.01.22",
      "date": "2020. 7. 21. 00:40",
      "tags": [
        "gcp",
        "NCLOUD",
        "구글 클라우드 플랫폼",
        "네이버 클라우드 플랫폼",
        "대역폭",
        "서버",
        "인스턴스"
      ],
      "category": "",
      "excerpt": "",
      "summary": "앞으로 티스토리 대신 blog.stackframe.dev에서 블로깅을 합니다 갑자기 문득 네이버 클라우드 플랫폼과 구글 클라우드 플랫폼의 서버/VM 인스턴스의 인터넷 네트워크 대역폭이 어느정도 되는지 궁금하여 실험해봤습니다 처음에는 제 컴퓨터와 각각 iperf3로 대역폭을 측정해봤으나 제 인터넷 계약이 500Mbps이고 둘 다 그걸 뛰어넘는 대역폭을 가지고 있어서 제대로 측정이 되지 않았습니다",
      "word_count": 1088
    },
    {
      "url": "https://stackframe.tistory.com/45",
      "title": "stackframe",
      "content": "앞으로 티스토리 대신 blog.stackframe.dev에서 블로깅을 합니다. 이 블로그는 남겨 둘 예정입니다.\n\n\n\n이전 글에서 설명한 2단계 인증으로는 일반인들에겐 충분히 안전한 보안이 될 수 있습니다. 다만 자신이 대기업의 임원이거나 정치인 등 APT 공격이나 집중 공격 타깃이 되기 쉬운 경우 더 강력한 보안을 원하게 될 수 있습니다. 구글은 이런 사람들을 위해서 Advanced Protection Program(고급 보호 프로그램)을 제공하고 있습니다.\n \n이 프로그램에 등록한 사용자가 로그인하기 위해서는 무조건 인증키를 사용하여야 합니다. 2단계 인증에서 보았던 것처럼 인증키가 없을 경우를 위한 옵션 자체가 없습니다. 프로그램 자체는 무료지만 이 프로그램을 사용하기 위해서는 2개의 FIDO 인증키가 필요합니다. 로그인을 하기 위해서는 인증키가 무조건 필요한데 하나만 만들어 두었다면 잃어버리거나 파손된다면 계정에 접근할 방법이 없어지므로 백업용으로 하나 더 등록해 두는 것입니다.\n \n고급 보호 프로그램을 등록하는 곳은 https://landing.google.com/intl/ko/advancedprotection/ 입니다.\n \n등록을 시작하면 아래와 같은 화면이 나옵니다.\n\n\n \n고급 보호 프로그램은 다른 인증보다 더 까다롭고 제한적이므로 정말로 그만한 보안이 필요한지 생각해보시기 바랍니다. 잘못 설정해버렸다가 인증키 모두 날려먹어버리면 계정을 복구하기 매우 까다로워집니다.\n \n\n\n \n보안키는 이미 가지고 있다고 생각하고 다음으로 넘어가겠습니다.\n\n\n두 키를 등록하도록 요구하고 있습니다. 사용의 편의성 때문에 블루투스 키를 기본 키로 권장하지만 편하신대로 하시면 됩니다. 저는 이번에 구입한 SoloKeys Solo Tap을 사용하여 등록할 예정입니다.\n \n\n\n \n등록할 때 사용한 시스템과 위치가 나옵니다. 그런데 위치는 정확하지 않군요.\n \n\n\n \n키 등록이 끝나면 주의사항을 알려줍니다. 계정 복구가 더 까다로워지고 서드파티 프로그램은 사용할 수 없게 됩니다. 여기서 등록을 누르게되면 해당 계정이 로그인된 모든 기기들에서 로그아웃됩니다.\n \n구글 계정 보안에서 확인해보면 다른 모든 인증방법이 사라지고 보안 키만 남아있는걸 확인할 수 있습니다.\n\n\n \n심지어 로그인에서 다른 방법 시도를 눌러봐도 보안 키 밖에 나오지 않으니 다른 방법으로 로그인은 불가능하다고 볼 수 있습니다.\n\n\n \n이렇게 강력한 보안을 제공하는 프로그램이므로 까딱하면 계정 사용이 불가능해지니 등록하기 전에 준비가 잘 되었는지, 정말로 이게 필요한지 생각해 보시고 하시기 바랍니다.\n\n\n\n\n\n\n\n\n\n\n공유하기\n\n게시글 관리\n\n\nstackframe \n\n\n저작자표시 비영리\n\n(새창열림)\n\n\n \n\n\n\n'Security' 카테고리의 다른 글\n\n\nSolo V2 킥스타터에서 펀딩 중  (0)\n2021.01.30\n\n\nFIDO 인증키로 Google 2단계 인증 설정하기  (0)\n2020.10.27\n\n\nSoloKeys Solo Tap 구입  (0)\n2020.10.26\n\n\nFIDO와 Webauthn이란 무엇인가  (0)\n2020.10.26",
      "date": "2020. 10. 27. 01:00",
      "tags": [
        "FIDO",
        "고급 보호 프로그램",
        "구글",
        "로그인",
        "보안",
        "보안키",
        "인증키"
      ],
      "category": "",
      "excerpt": "",
      "summary": "이전 글에서 설명한 2단계 인증으로는 일반인들에겐 충분히 안전한 보안이 될 수 있습니다 2단계 인증에서 보았던 것처럼 인증키가 없을 경우를 위한 옵션 자체가 없습니다 프로그램 자체는 무료지만 이 프로그램을 사용하기 위해서는 2개의 FIDO 인증키가 필요합니다",
      "word_count": 1531
    },
    {
      "url": "https://stackframe.tistory.com/44",
      "title": "stackframe",
      "content": "앞으로 티스토리 대신 blog.stackframe.dev에서 블로깅을 합니다. 이 블로그는 남겨 둘 예정입니다.\n\n\n\n\n\n\n\n\n\n구글은 타인이 무단으로 계정에 접근하지 못하도록 비밀번호 이외에 다양한 인증 방법을 제공합니다. 기본적으로 의심스러운 로그인이 발견되면 실 소유자가 사용하는 스마트폰으로 알림을 보내거나 알맞은 번호를 누르도록 합니다. 하지만 이것들로는 완벽하게 로그인 하는걸 막을 수 없으므로 구글은 2단계 인증을 제공합니다.\n \n구글 계정의 2단계 인증은 https://myaccount.google.com에서 보안 > Google에 로그인 > 2단계 인증 에서 설정할 수 있습니다.\n\n\n \n이렇게 다양한 인증 방법이 있습니다만 여기서는 보안 키에 대해서 알아보겠습니다.\n \n보안 키는 스마트폰도 가능하지만 보통 USB나 NFC 등을 통해 사용자를 인증하는 하드웨어를 의미합니다. 그리고 다양한 제조사에서 보안키를 만들어도 동일한 방법으로 사용가능하도록 하는 프로토콜이 FIDO입니다. 구글은 FIDO를 지원하여 이를 구현한 인증키를 통해 2차 인증을 할 수 있습니다. 저 목록 중에서 보안 키 추가를 누르고 진행하면 아래와 같은 창이 뜹니다.\n\n\n \n이 창이 뜨면 USB나 NFC 등 보안 키가 지원하는 방법으로 컴퓨터에 연결하고 버튼을 누르거나 지문인식 등을 시행합니다. 그러면 아래와 같이 추가된 키의 이름을 지정할 수 있게 됩니다.\n\n\n \n이렇게하면 2단계 인증에 보안 키가 추가되고 앞으로 로그인을 하기위해 비밀번호를 입력하면 추가로 인증 키도 요구하게 됩니다.\n\n\n\n하지만 로그인을 하기위해서는 무조건 보안키가 있어야 하는 것은 아닙니다. 보안키가 기본으로 사용되긴 하지만 계정이 등록된 자신의 스마트폰을 사용하거나 백업 코드 등을 사용하면 보안키가 없어도 로그인이 가능합니다.\n\n\n\n\n\n\n공유하기\n\n게시글 관리\n\n\nstackframe \n\n\n저작자표시 비영리\n\n(새창열림)\n\n\n \n\n\n\n'Security' 카테고리의 다른 글\n\n\nSolo V2 킥스타터에서 펀딩 중  (0)\n2021.01.30\n\n\n고급 보호 프로그램으로 구글 계정을 더 안전하게 보호하기  (0)\n2020.10.27\n\n\nSoloKeys Solo Tap 구입  (0)\n2020.10.26\n\n\nFIDO와 Webauthn이란 무엇인가  (0)\n2020.10.26",
      "date": "2020. 10. 27. 00:17",
      "tags": [
        "2단계",
        "2차",
        "FIDO",
        "계정",
        "구글",
        "로그인",
        "보안키",
        "인증",
        "인증키"
      ],
      "category": "",
      "excerpt": "",
      "summary": "구글은 타인이 무단으로 계정에 접근하지 못하도록 비밀번호 이외에 다양한 인증 방법을 제공합니다 하지만 이것들로는 완벽하게 로그인 하는걸 막을 수 없으므로 구글은 2단계 인증을 제공합니다 구글 계정의 2단계 인증은 https://myaccount.google.com에서 보안 > Google에 로그인 > 2단계 인증 에서 설정할 수 있습니다",
      "word_count": 1146
    },
    {
      "url": "https://stackframe.tistory.com/43",
      "title": "stackframe",
      "content": "앞으로 티스토리 대신 blog.stackframe.dev에서 블로깅을 합니다. 이 블로그는 남겨 둘 예정입니다.\n\n\n\n전까지는 다른 FIDO2 인증키를 사용하고 있었으나 실험이나 연구용으로도 사용하여 자주 초기화하게 되어서 아예 실제 사용 용도로 SoloKeys Solo Tap을 구입하게 되었습니다. 사실 9월 말에 주문하였지만 엄청나게 느린 배송 속도와 이런저런 배송 문제 때문에 드디어 받아보게 되었습니다.\n\n\n \n주문하면 이렇게 검정색, 빨간색 두 색상의 커버도 함께 들어있습니다. 원하는 색상으로 끼워넣으면 됩니다. 이렇게 PCB가 바로 보이고 마감도 조금 좋지 못한 면이 있기 때문에 SoloKeys 제품들 전체적으로 아쉬운 점이라 할 수 있습니다.\n \n현재 SoloKeys에서 판매하는 모든 키들은 FIDO2를 충족합니다. 그러므로 2차인증은 물론이고 사용하는 곳에 따라서 아이디나 비밀번호 없이도 로그인이 가능합니다. 추가적으로 hmac-secret 확장도 지원해서 Windows Hello도 지원한다고 되어있는데, 저는 Windows를 잘 쓰지 않고 로컬 계정만 사용해서 확인은 못해봤습니다. 그리고 systemd의 systemd-homed는 FIDO 인증키가 hmac-secret을 지원하면 로그인 용도의 인증키로도 사용가능하다고 되어있는데 현재 archlinux의 systemd 컴파일 의존성에서 libfido2가 빠져있기 때문에 사용해보지 못했습니다.\n \n이 Solo Tap은 NFC 기능도 포함되어 있습니다. 안드로이드를 사용하는 경우 USB를 연결하지 않고 NFC로 FIDO 인증을 할 수 있습니다. 다만 Solo Tap의 NFC 전력 공급 효율 문제로 인해 스마트폰 마다 사용 가능 여부가 다릅니다.\n\n\n \n그러므로 만약 Tap 계열 제품을 구매할 예정이라면 주의하시기 바랍니다. 저는 다행히 잘 작동했습니다.\n \nSoloKeys 이외에도 Yubico, Nitrokey, FEITIAN, Titan 등 여러 FIDO 인증키 제품들이 시장에 존재하고 저마다 장점이 있습니다만 SoloKeys는 유일하게 오픈소스로 펌웨어가 만들어진 인증키입니다. 다른 회사 제품들은 대부분 클로즈드 소스이고 Nitrokey는 SoloKeys의 펌웨어에서 약간의 수정을 하여 사용하므로 완전한 오픈소스라고 보기 어렵습니다. 오픈소스인 덕분에 직접 코드에 문제가 있는지 확인할 수 있고 원하는 기능을 구현할 수 있습니다. SoloKeys는 펌웨어 업그레이드가 가능하므로 지속적으로 업데이트를 받을 수 있다는 장점도 있습니다.\n \n추가적으로 올해 말에 새로운 인증키를 출시한다고 합니다. NFC 전력 공급 개선, 칩셋 변경으로 더 빠르고 저전력으로 동작, 에폭시를 사용하여 방수, 터치형 버튼으로 변경 등 정말 많은 부분에서 개선이 이루어질 예정입니다. 저는 이미 Solo Tap을 사버렸지만 만약 새 제품이 공지한대로 나온다면 바로 구매할 의향이 있을 정도로 매력적이라 생각합니다.\n\n\n\n\n\n\n\n\n\n\n공유하기\n\n게시글 관리\n\n\nstackframe \n\n\n저작자표시 비영리\n\n(새창열림)\n\n\n \n\n\n\n'Security' 카테고리의 다른 글\n\n\nSolo V2 킥스타터에서 펀딩 중  (0)\n2021.01.30\n\n\n고급 보호 프로그램으로 구글 계정을 더 안전하게 보호하기  (0)\n2020.10.27\n\n\nFIDO 인증키로 Google 2단계 인증 설정하기  (0)\n2020.10.27\n\n\nFIDO와 Webauthn이란 무엇인가  (0)\n2020.10.26",
      "date": "2020. 10. 26. 23:28",
      "tags": [
        "FIDO2",
        "hmac-secret",
        "NFC",
        "Solo Tap",
        "SoloKeys",
        "Webauthn",
        "인증키"
      ],
      "category": "",
      "excerpt": "",
      "summary": "앞으로 티스토리 대신 blog.stackframe.dev에서 블로깅을 합니다 전까지는 다른 FIDO2 인증키를 사용하고 있었으나 실험이나 연구용으로도 사용하여 자주 초기화하게 되어서 아예 실제 사용 용도로 SoloKeys Solo Tap을 구입하게 되었습니다 그리고 systemd의 systemd-homed는 FIDO 인증키가 hmac-secret을 지원하면 로그인 용도의 인증키로도 사용가능하다고 되어있는데 현재 archlinux의 systemd 컴파일 의존성에서 libfido2가 빠져있기 때문에 사용해보지 못했습니다",
      "word_count": 1708
    },
    {
      "url": "https://stackframe.tistory.com/47",
      "title": "stackframe",
      "content": "앞으로 티스토리 대신 blog.stackframe.dev에서 블로깅을 합니다. 이 블로그는 남겨 둘 예정입니다.\n\n\n\n\n\n\n\n\n\nsystemd는 systemd-detect-virt 라는 프로그램을 포함하고 있습니다. 이를통해 현재 가상화 환경에서 실행되는지, 어떤 가상화 기술을 사용하는지 확인할 수 있습니다.사용방법은 단순히 쉘에서 systemd-detect-virt를 실행하면 됩니다.\n먼저 어떠한 가상화도 사용하지 않았다면 none이라는 문자열이 출력됩니다.\n라즈베리파이에서 systemd-nspawn을 통해 실행되는 컨테이너는 systemd-nspawn을 출력합니다.\n추가적으로 Vultr의 인스턴스는 kvm을 사용하는 것으로 나옵니다.이외에도 WSL, vmware, qemu, docker 등 다양한 가상화 기술도 감지할 수 있습니다. 추가적인 옵션이나 감지가능한 기술 목록을 보려면 아래의 man 페이지를 참고하기 바랍니다. https://www.freedesktop.org/software/systemd/man/systemd-detect-virt.html\n\n\n\n\n공유하기\n\n게시글 관리\n\n\nstackframe \n\n\n\n'Linux > systemd' 카테고리의 다른 글\n\n\nsystemd 유닛 설정 수정하기  (0)\n2020.07.17\n\n\nsystemd-resolved로 LLMNR 사용하기  (0)\n2020.05.04\n\n\n[Linux] coredumpctl로 크래시 디버깅하기  (0)\n2020.05.01\n\n\nsystemd-networkd로 SIT 터널링 설정하기  (0)\n2020.05.01\n\n\nsystemd-boot를 부트로더로 사용하기  (0)\n2020.04.28",
      "date": "2021. 1. 31. 16:13",
      "tags": [
        "kvm",
        "qemu",
        "systemd",
        "systemd-detect-virt",
        "systemd-nspawn",
        "가상화"
      ],
      "category": "",
      "excerpt": "",
      "summary": "앞으로 티스토리 대신 blog.stackframe.dev에서 블로깅을 합니다 systemd는 systemd-detect-virt 라는 프로그램을 포함하고 있습니다 이를통해 현재 가상화 환경에서 실행되는지, 어떤 가상화 기술을 사용하는지 확인할 수 있습니다.사용방법은 단순히 쉘에서 systemd-detect-virt를 실행하면 됩니다",
      "word_count": 829
    },
    {
      "url": "https://stackframe.tistory.com/41",
      "title": "stackframe",
      "content": "앞으로 티스토리 대신 blog.stackframe.dev에서 블로깅을 합니다. 이 블로그는 남겨 둘 예정입니다.\n\n\n\nPostgreSQL에는 schema(스키마)라는 개념이 있습니다. schema는 하나의 데이터베이스에 다수 존재할 수 있으며 table, sequence 등의 객체가 특정 schema에 속해지게 됩니다. 이를 통해 테이블들을 분류하고 사용자가 특정 schema에만 접근할 수 있도록하면 테이블 하나하나에 권한을 설정 할 필요없이 용도에 따른 접근제한을 걸 수 있습니다. 참고로 데이터베이스에는 기본적으로 public schema가 만들어져 있으며 여기에는 데이터베이스에 연결 가능한 role 이라면 마음대로 테이블을 생성할 수 있습니다.\n \nschema를 생성하기 위해서는 해당 데이터베이스에 CREATE 권한이 있어야 합니다. 그리고 schema에 대한 권한은 CREATE와 USAGE가 있습니다. CREATE는 해당 스키마를 사용하는 테이블, 시퀀스같은 객체를 만들 수 있는 권한이고, USAGE는 이 스키마에 속한 객체에 접근할 수 있는 권한입니다. 주의해야 할 것은 USAGE 권한이 없다 하더라도 해당 스키마에 어떤 객체가 속해있는지는 확인할 수 있습니다. 특정 role에 schema에 대한 권한을 부여하려면 아래와 같이 하면 됩니다.\npostgres=# GRANT CREATE,USAGE ON SCHEMA www TO test1;\nGRANT\npostgres=# REVOKE CREATE,USAGE ON SCHEMA www FROM test1;\nREVOKE\n \n이 schema를 사용할 때 중요한 것들 중 하나가 바로 search_path입니다. 이 search_path는 SQL 명령을 실행할 때 schema가 명시되지 않았다면 어떤 schema들에서 테이블같은 객체를 찾아볼 지 지정합니다. 따로 설정을 변경하지 않았다면 \"$user\", public으로 지정되어 있을겁니다. 현재 세션의 search_path를 보려면  show search_path  로 확인가능합니다.\n \npostgres=> show search_path;\n   search_path   \n-----------------\n \"$user\", public\n(1 row)\n\npostgres=>\n \n이것은 먼저 role 이름과 같은 schema에서 찾고 그래도 없다면 public schema에서 찾는다는 의미입니다.\n저는 SQL을 짤 때 일일이 schema를 적어주는걸 선호합니다만 그게 불가능하고 특정 schema만 사용하겠다 하시는 분은 ALTER DATABASE 나 ALTER ROLE 을 사용하여 변경할 수 있습니다. 참고로 database와 role 둘 다 설정이 있다면 role 쪽 설정이 우선됩니다.\npostgres=# ALTER DATABASE postgres SET search_path TO www,\"$user\",public;\nALTER DATABASE\npostgres=# ALTER ROLE test1 SET search_path TO public;\nALTER ROLE\n \n만약 설정을 원래대로 돌리고 싶다면 아래와 같이 하면 됩니다.\npostgres=# ALTER DATABASE postgres RESET search_path;\nALTER DATABASE\npostgres=# ALTER ROLE test1 RESET search_path;\nALTER ROLE\n \n만약 search_path에 특정 스키마를 포함시키지 않았거나 search_path를 지정하더라도 다른 스키마에 속한 동일한 이름의 테이블과 함께 사용하면 schema 지정이 필수입니다. schema를 지정할 때는 단순히 해당 객체 이름 앞에 {schema}. 을 붙히면 됩니다. 예를들어 test 라는 테이블이 각각 a,b 스키마에 들어있고 이 둘을 JOIN하고 싶다면 아래와 같이 하면 됩니다.\n> SELECT a.test.col1, b.test.col2 FROM a.test JOIN b.test ON a.test.col1 = b.test.col1;\n \n만약 테이블 이름이 다르면 FROM과 JOIN 바로 뒤의 테이블을 나타내는 부분만 스키마를 지정해주고 나머지 컬럼을 나타내는 부분은 스키마 부분을 생략해도 됩니다.\n\n\n\n\n\n\n\n\n\n\n공유하기\n\n게시글 관리\n\n\nstackframe \n\n\n저작자표시 비영리\n\n(새창열림)\n\n\n \n\n\n\n'PostgreSQL' 카테고리의 다른 글\n\n\nPostgreSQL 메이저 버전 업그레이드 방법 3. pg_upgradecluster  (0)\n2018.11.20\n\n\nPostgreSQL 메이저 버전 업그레이드 방법 2. pg_upgrade  (0)\n2018.11.19\n\n\nPostgreSQL 메이저 버전 업그레이드 방법 1. pg_dumpall  (2)\n2018.11.19",
      "date": "2020. 9. 5. 15:28",
      "tags": [
        "PostgreSQL",
        "schema",
        "search_path",
        "권한",
        "스키마"
      ],
      "category": "",
      "excerpt": "",
      "summary": "PostgreSQL에는 schema(스키마)라는 개념이 있습니다 이를 통해 테이블들을 분류하고 사용자가 특정 schema에만 접근할 수 있도록하면 테이블 하나하나에 권한을 설정 할 필요없이 용도에 따른 접근제한을 걸 수 있습니다 저는 SQL을 짤 때 일일이 schema를 적어주는걸 선호합니다만 그게 불가능하고 특정 schema만 사용하겠다 하시는 분은 ALTER DATABASE 나 ALTER ROLE 을 사용하여 변경할 수 있습니다",
      "word_count": 2346
    },
    {
      "url": "https://stackframe.tistory.com/42",
      "title": "stackframe",
      "content": "앞으로 티스토리 대신 blog.stackframe.dev에서 블로깅을 합니다. 이 블로그는 남겨 둘 예정입니다.\n\n\n\n\n\n\n\n\n\nFIDO는 Fast IDentity Online의 약자로 사용자 인증 프로토콜에 대한 표준입니다. FIDO를 준수하는 시스템에서는 어떤 제조사가 인증키를 만들든 FIDO만 따른다면 사용가능합니다. 기본적으로 FIDO는 Challenge-response로 인증합니다. 인증키를 사용할 곳에 미리 공개키를 등록시켜두고 이후 인증할 때 challenge를 받고 개인키로 서명하여 응답하는 것으로 사용자가 인증키를 보유하고 있는 본인이라는 것을 증명하게 됩니다. 현재 최신 프로토콜 버전은 FIDO2이며 CTAP1, CTAP2라는 규격으로 나뉘어져 있습니다.\n \nCTAP1은 기존의 FIDO1(FIDO)의 U2F를 의미합니다. 이 규격은 사용자가 로그인 할 때 인증키를 통해 2차 인증을 가능하게 합니다. FIDO를 통한 2차 인증을 지원하는 사이트에서는 이것이 사용됩니다. 이전 FIDO U2F가 FIDO2의 CTAP1이 된 것이므로 FIDO U2F를 사용하는 장치도 호환됩니다.\n \nCTAP2는 아예 아이디나 비밀번호를 사용하지 않고 인증키만으로 인증하는 규격입니다. 그러므로 이것을 지원하는 곳에서는 단지 로그인 버튼을 누르고 FIDO 장치를 연결 후 버튼이나 지문인식을 하면 바로 인증됩니다. 기존의 FIDO UAF가 CTAP2로 명칭이 바뀐 것이지만 기본적으로 FIDO UAF만 지원하는 기기는 본 적이 없고 FIDO2 인증을 받은 경우만 지원한다고 알고 있는게 편합니다.\n \nFIDO의 사용자 인증은 사용하는 인증키에 따라서 다르게 됩니다. 인증키가 지문이나 홍채인식을 사용할 수도 있고 단지 버튼을 누르기만 해도 되는 것이 있습니다. 인증키를 등록받는 쪽은 인증 방법에 대해서는 신경쓰지 않아도 되고 신경 쓸 수도 없습니다. 단지 인증키가 사용자를 검증하는지, 사람이 존재하는지 확인만 하는지만 알 수 있으므로 사용자 검증이 꼭 필요한 곳에서라면 검증 플래그가 없다면 등록이나 인증을 거부할 수는 있습니다.\n \n추가적으로 Attestation이라고 해서 인증키가 FIDO alliance에서 인증받았다는 정보를 제공할 수 있습니다. Attestation을 통해서 특정 제조사에서 만든 인증키만 사용 가능하도록 시스템을 구성하는 것도 가능합니다. \n\nWebauthn은 이 CTAP1, CTAP2를 웹 브라우저에서도 사용가능하도록 하는 API입니다. Javascript로 Webauthn을 사용하여 간단히 FIDO 장치를 사용할 수 있습니다. Webauthn이 나오기 이전에는 u2f라는 API가 사용되었으나 Webauthn이 나온 지금은 호환성을 위해 남아있는 상태이므로 앞으로는 Webauthn만 사용해야 합니다.\n \nWebauthn은 CTAP2도 지원하도록 만들어져 있지만 브라우저와 운영체제에 따라 약간의 제약사항이나 사용할 수 없는 기능이 생길 수 있습니다. 예를들어 리눅스의 Firefox에서는 CTAP1을 통한 2차인증은 가능하나 CTAP2를 사용하는 resident key는 아직 미완성인 상태입니다. 안드로이드는 오직 Android SafetyNet을 통해 CTAP1 인증이 가능하며 CTAP2는 지원하지 않습니다. 다만 대부분 CTAP1에 대해서는 구현이 된 상태이므로 2차 인증은 어떤 환경에서든지 사용가능하다고 생각해도 될 것 같습니다.\n \nWebauthn을 통해 2차 인증을 하게된다면 아래와 같이 브라우저에서 사용자에게 인증키 조작을 요구합니다.\n\n\n사용자가 인증키를 연결하고 버튼을 누르는 등 인증을 실행했다면 인증 프로세스가 진행되고 결과가 나오게 될 것 입니다. 아래는 구글에서 인증키로 인증이 완료되었을 때 나오는 화면입니다.\n\n\n \nWebauthn API 예제는 인터넷에 상당히 많이 있습니다. 특히 webauthn.io에서는 실제 동작하는 예시를 보여주며 webauthn.guide에서 step by step으로 Javascript 소스를 통해 설명하고 있습니다. 만약 서버에서 Webauthn 인증을 구현하고 싶다면 W3C의 스펙 문서를 읽어보는게 좋습니다. \n\n\n\n\n공유하기\n\n게시글 관리\n\n\nstackframe \n\n\n저작자표시 비영리\n\n(새창열림)\n\n\n \n\n\n\n'Security' 카테고리의 다른 글\n\n\nSolo V2 킥스타터에서 펀딩 중  (0)\n2021.01.30\n\n\n고급 보호 프로그램으로 구글 계정을 더 안전하게 보호하기  (0)\n2020.10.27\n\n\nFIDO 인증키로 Google 2단계 인증 설정하기  (0)\n2020.10.27\n\n\nSoloKeys Solo Tap 구입  (0)\n2020.10.26",
      "date": "2020. 10. 26. 20:02",
      "tags": [
        "2차인증",
        "CTAP1",
        "CTAP2",
        "FIDO",
        "FIDO2",
        "U2F",
        "UAF",
        "Webauthn",
        "인증"
      ],
      "category": "",
      "excerpt": "",
      "summary": "FIDO는 Fast IDentity Online의 약자로 사용자 인증 프로토콜에 대한 표준입니다 FIDO를 준수하는 시스템에서는 어떤 제조사가 인증키를 만들든 FIDO만 따른다면 사용가능합니다 기본적으로 FIDO는 Challenge-response로 인증합니다",
      "word_count": 2285
    },
    {
      "url": "https://stackframe.tistory.com/46",
      "title": "stackframe",
      "content": "앞으로 티스토리 대신 blog.stackframe.dev에서 블로깅을 합니다. 이 블로그는 남겨 둘 예정입니다.\n\n\n\n3개월 전에 제가 Solo Tap을 구입했었는데 이제 업그레이드 버전인 Solo V2가 킥스타터에서 펀딩을 하고 있습니다. https://www.kickstarter.com/projects/conorpatrick/solo-v2-safety-net-against-phishing/ \n\n\n이전부터 새로운 버전이 나오는걸 기다리고 있었고 열리자마자 바로 후원을 신청했습니다.\n2등으로 신청 완료\n\n\n \nSolo V2는 이전 버전에 비해 개선되거나 추가된 기능이 많습니다.\n먼저 Solo Tap에서 고질적인 문제였던 NFC 호환성이 대폭 향상되었습니다. NFC 전력 효율이 부족하여 스마트폰 기종에 따라 작동하지 않는 경우도 있었는데 이를 재설계하여 더 잘 동작하게 되었습니다.\n컴퓨터의 두뇌라 할 수 있는 마이크로프로세서가 변경되었습니다. 기존 키들은 STM32L432KC 칩을 사용했으나 V2는 LPC55S69를 사용합니다. 더 빠르고 적은 전력을 사용하는 칩으로 변경하여 아주 제한적인 NFC 환경에서도 안정성있게 동작합니다.\n버튼 대신 터치로 변경되었습니다. 위의 사진에 나온 것처럼 버튼이 사라지고 대신 양 옆과 끝부분에 보이는 금속 표면에 터치를 하는 것으로 동작을 승인할 수 있습니다. 버튼 내구성이 다 닳을만큼 누를 일은 잘 없겠지만 물리적으로 고장날 위험이 있는 부분이 터치로 바뀜으로서 더욱 튼튼해졌습니다.\nUSB A 타입 또한 C 타입과 마찬가지로 방향을 신경쓰지 않고 연결할 수 있습니다. 단자가 양면으로 되어있기 때문에 사용자가 확인하기 전까지 중첩상태인 슈뢰딩거의 USB가 되는 불상사가 없습니다.\n\n\n\n\nPCB가 두가지로 나뉘어서 제작되며 투명 에폭시 수지로 접합됩니다. 위의 GIF에 보이듯 칩이 장착되는 PCB와 USB 단자와 터치 부분이 있는 PCB 두가지가 따로 제작됩니다. 거기다 투명 에폭시 수지로 접합되기 때문에 오픈 하드웨어를 유지하며 보안성이 향상되고 방수 기능까지 갖췄습니다.\nPIV라는 인증 기능이 추가됩니다. 미국 국가기관에서 만들고 사용하는 표준 사용자 인증 방법인데 이를 통해 사용자 인증, 서명, 접근허가 등이 가능합니다. 기반이 되는 드라이버 같은 경우는 이미 표준화가 되어 Windows에는 프로그램이 지원만 한다면 따로 설치없이 바로 사용가능하고 리눅스라도 몇몇 프로그램만 설치하면 됩니다. 개인적으로 응용 가능성이 매우 높은 기능이라 생각하기 때문에 기대하고 있습니다. 경쟁 회사인 Yubico에는 이미 지원하는 제품이 출시되어 있지만 제가 그거까지 살 돈이 되지 않아 써보지 못하고 있습니다.\n내부 프로그램 언어가 Rust로 모두 다시 짜여졌습니다. 제가 Rust에 대해 잘 알지는 못하지만 언어 자체가 컴파일 단계에서 최대한 검증되어 런타임 때 문제가 생기지 않게 설계되었다고 들었습니다. 어쨌든 Rust를 통해 내부에서 작동하는 프로그램이 더 안전해졌습니다.\n \nFIDO2는 기본적으로 지원하며 resident key는 최대 100개까지 저장가능하다고 합니다. 제가 알기로는 이전버전은 50개가 최대였습니다. 물론 그걸 모두 쓸 일은 거의 없겠지만 더 많이 저장할 수 있게 된 건 좋은 일이라 봅니다.\n \n저는 후원 보상으로 4개의 키가 4월에 배송되는데 빨리 받아서 여러가지로 실험해보고 싶습니다.\n\n\n\n\n\n\n\n\n\n\n공유하기\n\n게시글 관리\n\n\nstackframe \n\n\n저작자표시 비영리\n\n(새창열림)\n\n\n \n\n\n\n'Security' 카테고리의 다른 글\n\n\n고급 보호 프로그램으로 구글 계정을 더 안전하게 보호하기  (0)\n2020.10.27\n\n\nFIDO 인증키로 Google 2단계 인증 설정하기  (0)\n2020.10.27\n\n\nSoloKeys Solo Tap 구입  (0)\n2020.10.26\n\n\nFIDO와 Webauthn이란 무엇인가  (0)\n2020.10.26",
      "date": "2021. 1. 30. 01:57",
      "tags": [
        "FIDO2",
        "PIV",
        "Solo",
        "SoloKeys",
        "V2",
        "인증"
      ],
      "category": "",
      "excerpt": "",
      "summary": "앞으로 티스토리 대신 blog.stackframe.dev에서 블로깅을 합니다 3개월 전에 제가 Solo Tap을 구입했었는데 이제 업그레이드 버전인 Solo V2가 킥스타터에서 펀딩을 하고 있습니다 https://www.kickstarter.com/projects/conorpatrick/solo-v2-safety-net-against-phishing/ 이전부터 새로운 버전이 나오는걸 기다리고 있었고 열리자마자 바로 후원을 신청했습니다",
      "word_count": 1928
    },
    {
      "url": "https://stackframe.tistory.com/39",
      "title": "stackframe",
      "content": "앞으로 티스토리 대신 blog.stackframe.dev에서 블로깅을 합니다. 이 블로그는 남겨 둘 예정입니다.\n\n\n\n최근 대부분의 배포판들이 systemd를 init으로 사용하고, 패키지 안에 systemd service 유닛 파일을 포함하고 있어서 사용자는 그냥 systemctl 명령으로 프로그램을 실행, 중지를 하면 됩니다. 그런데 몇몇 패키지 간에 우선순위나 환경변수, 리소스 컨트롤이 필요한 경우가 발생할 수 있습니다. systemd는 최대한 동시에 실행하려하기 때문에 우선순위를 제대로 정하지 않는다면 실행이 성공할 수도 있고 실패할 수도 있는 마치 슈뢰딩거의 고양이같은 상황이 발생할 수 있습니다. 저의 경우는 postfix와 bind9이 동일한 서버에 있고 postfix가 bind9이 완전히 실행되기도 전에 제 서버의 도메인을 리졸브 시도를 하여 실행 실패한 적이 있었습니다. 우연히 bind9이 빨리 실행되어 postfix가 문제없이 실행되기도 해서 알아채기도 어려웠습니다.\n \n그렇다고 /usr/lib/systemd/system/ 디렉토리에 패키지 매니저가 설치한 유닛을 직접 수정하는 것은 좋지 못합니다. 업데이트를 하면 다시 원상태로 돌아가버릴테고 다시 기존의 설정으로 돌리기도 어려워질 수 있습니다. 이를 위해서 systemctl에 edit, revert 명령이 존재합니다.\n \n먼저 edit 명령은 기본적으로 drop-in 디렉토리와 파일을 생성하여 유닛이 실행될 때 해당 파일에 들어있는 내용을 추가로 적용시킵니다. 예제를 위해 저는 아래의 유닛을 /etc/systemd/system/test.service 로 생성하였습니다.\n[Unit]\nDescription=test service\n\n[Service]\nExecStart=/bin/wall test\n\n[Install]\nWantedBy=multi-user.target\nsystemctl status test.service로 보면 아래와 같이 나옵니다.\n\n\n \n이제 edit 명령을 사용하여 Description을 수정해 보겠습니다. 아래의 명령을 실행하면 vi, vim, nano 중에 하나로 텍스트 편집기가 뜹니다.\n# systemctl edit test.service\n여기에 기존의 Unit 작성법대로 변경하거나 추가할 섹션과 설정을 적어주면 됩니다. 저는 Description을 수정할 예정이기에 [Unit]섹션과 Description= 설정을 넣었습니다.\n\n\n이제 다시 systemctl status로 확인하면 설명이 바뀌었고 Drop-in 이 생긴 것을 볼 수 있습니다.\n\n\n \n추가적으로 edit 명령에 --runtime 옵션을 사용할 수 있습니다. 이 옵션과 함께 수정된 설정은 시스템이 켜져있을 때만 적용되고 리부팅하면 원상태로 돌아가게 됩니다. 대신 이미 --runtime 옵션없이 drop-in이 생성되었다면 /run 디렉토리보다 /etc 디렉토리가 우선순위가 높기 때문에 거부합니다.\n\n\n \n이제 revert 명령으로 drop-in들을 삭제하여 원상태의 유닛 설정으로 되돌릴 수 있습니다.\n# systemctl revert test.service\n \n\n\n \n추가적으로 리소스 제한할 때 주로 사용하는 set-property 명령도 있습니다만 edit 가 좀 더 범용적으로 사용할 수 있고 edit를 사용할 줄 알면 set-property를 사용하는 것도 간단합니다. 짧은 예제로 아래와 같이 실행하면 해당 유닛에 포함되는 프로세스들의 최대 메모리 사용량을 1GB로 제한 할 수 있습니다.\n# systemctl set-property test.service MemoryMax=1G\n \n\n\n\n\n\n\n\n\n\n\n공유하기\n\n게시글 관리\n\n\nstackframe \n\n\n저작자표시 비영리\n\n(새창열림)\n\n\n \n\n\n\n'Linux > systemd' 카테고리의 다른 글\n\n\nsystemd-detect-virt로 가상화 환경 확인하기  (0)\n2021.01.31\n\n\nsystemd-resolved로 LLMNR 사용하기  (0)\n2020.05.04\n\n\n[Linux] coredumpctl로 크래시 디버깅하기  (0)\n2020.05.01\n\n\nsystemd-networkd로 SIT 터널링 설정하기  (0)\n2020.05.01\n\n\nsystemd-boot를 부트로더로 사용하기  (0)\n2020.04.28",
      "date": "2020. 7. 17. 01:34",
      "tags": [
        "service",
        "systemctl",
        "systemd",
        "설정",
        "수정",
        "유닛"
      ],
      "category": "",
      "excerpt": "",
      "summary": "앞으로 티스토리 대신 blog.stackframe.dev에서 블로깅을 합니다 최근 대부분의 배포판들이 systemd를 init으로 사용하고, 패키지 안에 systemd service 유닛 파일을 포함하고 있어서 사용자는 그냥 systemctl 명령으로 프로그램을 실행, 중지를 하면 됩니다 systemd는 최대한 동시에 실행하려하기 때문에 우선순위를 제대로 정하지 않는다면 실행이 성공할 수도 있고 실패할 수도 있는 마치 슈뢰딩거의 고양이같은 상황이 발생할 수 있습니다",
      "word_count": 2112
    },
    {
      "url": "https://stackframe.tistory.com/33",
      "title": "stackframe",
      "content": "앞으로 티스토리 대신 blog.stackframe.dev에서 블로깅을 합니다. 이 블로그는 남겨 둘 예정입니다.\n\n\n\n\n\n\n\n\n\n한국에서는 아직 개인 인터넷에 IPv6를 할당하는 ISP가 없습니다. 하지만 NAS나 서버를 집에서 운영하거나 실험적인 목적으로 IPv6를 할당받고 싶은 사람도 있습니다. 그런 분들을 위해 IPv4를 통해 IPv6 패킷을 외국의 서버로 터널링하는 TunnelBroker라는 서비스가 있습니다. 이 서비스는 미국의 ISP인 Herricane Electric에서 무료로 제공하고 있습니다.\n\n \n\nHurricane Electric Free IPv6 Tunnel Broker\nHurricane Electric Free IPv6 Tunnel Broker IPv6 Tunnel Broker Check out our new usage stats! And then hit up our new Forums! Welcome to the Hurricane Electric IPv6 Tunnel Broker! Our free tunnel broker service enables you to reach the IPv6 Internet by tunn\nwww.tunnelbroker.net\n\n\nIPv6를 할당받기 위해서는 먼저 회원가입을 해야합니다.\n로그인 후 왼쪽 사이드바에 있는 Create Regular Tunnel 링크를 클릭하여 현재 컴퓨터의 IPv4 주소를 입력하고 연결될 서버의 위치를 정합니다.\n\n\n중요한 점은 자신의 IPv4에 서버가 ping을 보내서 확인하기 때문에 ping을 주고받을 수 있어야 합니다. 만약 공유기를 사용하고 있다면 ping에 응답하지 않도록 설정되어 있어서 생성이 불가능할 수 있습니다.\n\n\n생성되었다면 위와같은 페이지가 나옵니다. 참고로 터널브로커에서는 /64 프리픽스의 IPv6 블록을 기본적으로 할당해주지만 Assign /48을 누르면 /48 프리픽스의 블록을 추가로 할당해줍니다.\n \n이제 컴퓨터에서 서버에 터널링을 하여 IPv6 패킷들을 이 터널을 통해 보내고 받도록 하면 IPv6를 사용할 수 있게됩니다. 터널브로커에서는 이 설정도 복붙으로 해결할 수 있게 명령 리스트를 제공해줍니다. 위의 탭에서 Example Configurations를 클릭하면 다양한 운영체제 별로 설정을 위한 명령들을 표시해줍니다.\n\n\n여기서 리눅스는 Linux-route2를 사용하시면 됩니다. Linux-net-tools는 지금은 사용되지 않는 옛날의 ifconfig와 route 명령을 사용하는 설정방법입니다. 요즘은 iproute2 유틸에서 제공하는 ip 명령을 사용해야합니다.\nmodprobe ipv6\nip tunnel add he-ipv6 mode sit remote <서버 IPv4 주소> local <컴퓨터 IPv4 주소> ttl 255\nip link set he-ipv6 up\nip addr add <Client IPv6 Address> dev he-ipv6\nip route add ::/0 dev he-ipv6\n이 명령을 모두 root 권한으로 실행해야 합니다. 각 명령을 설명하자면 첫번째로 modprobe를 통해 ipv6 모듈을 로드합니다. 그런데 보통 ipv6는 커널에 바로 박히도록 컴파일되기 때문에 모듈로 존재하지 않으므로 대부분 저 명령을 실행하지 않아도 됩니다.\n두번째는 he-ipv6라는 인터페이스 이름으로 sit 터널을 만들라는 명령입니다. 참고로 sit은 simple internet transition의 약자입니다. 개인적으로는 sit이라는 명칭을 듣고 IPv6 over IPv4 tunnel을 떠올릴 수가 없기 때문에 의미상으로는 적절하지만 명칭으로는 불만입니다.\n세번째 명령은 he-ipv6 인터페이스를 활성화시킵니다\n네번째는 he-ipv6 인터페이스에 IPv6 주소를 지정합니다. 이 IPv6 주소는 관리페이지에 있는 Client IPv6 Address입니다.\n마지막은 모든 IPv6 주소에 대해서 he-ipv6 인터페이스로 전송하도록 라우팅 테이블을 추가합니다.\n \nip link 명령을 실행해보면 sit0 인터페이스가 추가적으로 생긴걸 볼 수 있는데 이는 fallback tunnel로 sit 모듈이 로드되면 자동으로 생기는 인터페이스이니 걱정하지 않으셔도 됩니다.\n \n이 명령들을 실행했다면 he-ipv6 라는 인터페이스가 만들어지고 IPv6로 서비스되는 서버에도 접속할 수 있게 됩니다. 그 예로 ipv6.google.com에 접속할 수 있습니다.https://ipv6.google.com\n\n\n구글 IPv6 주소로 ping 보내서 확인해볼 수도 있습니다.\n\n\n여기까지 했다면 컴퓨터에서 IPv6를 사용할 수 있게 되었는데 더 중요한 점은 우리에게 IPv6 블록이 할당되었다는 점입니다. 이 블록에 속한 주소로 패킷을 보낸다면 허리케인 일렉트릭 서버를 거쳐서 터널을 통해 내 컴퓨터로 온다는 뜻입니다. 만약 자신의 홈 네트워크에 속한 장비에 이 블록에 속한 주소를 할당하고 컴퓨터가 게이트웨이로 동작하도록 라우팅 테이블을 만져준다면 외부에서도 IPv6를 통해 홈 네트워크 내부의 장비에 접근할 수 있게 됩니다.\n \n참고로 자신의 IPv4 주소가 바뀌면 tunnelbroker.net 사이트와 명령에 들어있는 IPv4 주소를 수정해줘야 합니다. 사이트에 저장된 IPv4 주소는 Advanced 탭에 있는 Update URL로 CURL, wget 등을 사용하여 접속하는 것으로 쉽게 변경가능합니다.\n \n다른 중요한 점은 저 명령은 영구적인게 아니라서 리부팅하게되면 초기화됩니다. 그러므로 부팅할 때마다 실행되도록 쉘코드를 짜거나 systemd-networkd를 이용해야 편리하게 IPv6를 사용할 수 있습니다. systemd-networkd를 사용하는 방법은 다른 글에서 설명하겠습니다.\n\n \n\nsystemd-networkd로 SIT 터널링 설정하기\n이전 글로 터널브로커로 IPv6 터널링을 하는 방법을 설명했습니다. tunnelbroker.net으로 공인 IPv6 할당받기 한국에서는 아직 개인 인터넷에 IPv6를 할당하는 ISP가 없습니다. 하지만 NAS나 서버를 집에서 운영하..\nstackframe.tistory.com\n\n\n \n\n\n\n\n공유하기\n\n게시글 관리\n\n\nstackframe \n\n\n저작자표시 비영리\n\n(새창열림)\n\n\n \n\n\n\n'Network' 카테고리의 다른 글\n\n\n네이버 클라우드 플랫폼과 구글 클라우드 플랫폼 가상서버 인터넷 네트워크 대역폭 측정  (0)\n2020.07.21\n\n\nMAC 주소 추적의 진실  (1)\n2019.01.22",
      "date": "2020. 5. 1. 01:59",
      "tags": [
        "IPv6",
        "ip할당",
        "tunnelbroker",
        "터널",
        "터널링",
        "터널브로커"
      ],
      "category": "",
      "excerpt": "",
      "summary": "앞으로 티스토리 대신 blog.stackframe.dev에서 블로깅을 합니다 Linux-net-tools는 지금은 사용되지 않는 옛날의 ifconfig와 route 명령을 사용하는 설정방법입니다 그러므로 부팅할 때마다 실행되도록 쉘코드를 짜거나 systemd-networkd를 이용해야 편리하게 IPv6를 사용할 수 있습니다",
      "word_count": 3204
    },
    {
      "url": "https://stackframe.tistory.com/38",
      "title": "stackframe",
      "content": "앞으로 티스토리 대신 blog.stackframe.dev에서 블로깅을 합니다. 이 블로그는 남겨 둘 예정입니다.\n\n\n\n\n\n\n\n\n\n로컬 네트워크 내에서 일일히 IP를 적어서 연결하는 것은 귀찮은 일입니다. 거기다 IPv6 Link-local 주소를 사용한다면 더더욱 기억하기 어렵습니다. 그렇다고 네트워크에 DNS 서버를 설치하는 것도 배보다 배꼽이 큰 것 같습니다. 이럴 때 LLMNR이 좋은 해결책이 될 수 있습니다.\n \nLLMNR을 통해 동일한 네트워크 내에서 호스트네임으로 그 이름을 가진 호스트의 IP를 알아낼 수 있습니다. DNS 서버와 다른 점은 멀티캐스트를 사용한 기술이기 때문에 서버가 필요없고, 단지 호스트가 LLMNR 서비스를 실행해두고 있으면 됩니다. 거기다 Microsoft에서 만들었기 때문에 Windows에도 적용되어 있으므로 리눅스와 함께 사용할 수 있습니다.\n \nsystemd-resolved는 기본적으로 LLMNR이 활성화되어 있습니다. /etc/systemd/resolved.conf 파일의 LLMNR 옵션은 시스템 전체에, /etc/systemd/network/ 디렉토리의 .network 파일의 LLMNR 옵션은 해당 network 설정이 적용되는 인터페이스에만 영향을 미칩니다. 이전에 LLMNR을 끄거나 하지 않았다면 손 댈 필요없습니다.\n \n현재 시스템과 인터페이스 별 상태를 보고싶다면 resolvectl 명령으로 확인할 수 있습니다.\n\n\nsystemd-resolved가 켜져있는 것만으로 설정은 끝입니다. 이제 그냥 연결하고 싶은 호스트의 IP 대신 호스트명을 사용하면 됩니다.\n\n\n중요한 점은 호스트명에 . 이 들어가면 안됩니다. LLMNR은 기본적으로 계층없는 호스트명을 사용하기 때문에 . 이 들어가면 FQDN으로 인식하여 LLMNR이 아닌 DNS로 쿼리하게 됩니다.\n \n호스트명을 변경하려면 hostnamectl를 사용하면 됩니다.\n\n \n\nhostnamectl로 리눅스 호스트명 변경하기\n옛날 init 시절에 호스트명을 변경하려면 상당히 귀찮았습니다. 거기다 파일 하나만 바꿨다간 갑자기 에러가 뜨거나 하는 경우도 빈번했습니다. 하지만 systemd가 도입되면서 hostnamectl 이란 명령이 새로 생겼고..\nstackframe.tistory.com\n\n\n \n\n\n\n\n공유하기\n\n게시글 관리\n\n\nstackframe \n\n\n저작자표시 비영리\n\n(새창열림)\n\n\n \n\n\n\n'Linux > systemd' 카테고리의 다른 글\n\n\nsystemd-detect-virt로 가상화 환경 확인하기  (0)\n2021.01.31\n\n\nsystemd 유닛 설정 수정하기  (0)\n2020.07.17\n\n\n[Linux] coredumpctl로 크래시 디버깅하기  (0)\n2020.05.01\n\n\nsystemd-networkd로 SIT 터널링 설정하기  (0)\n2020.05.01\n\n\nsystemd-boot를 부트로더로 사용하기  (0)\n2020.04.28",
      "date": "2020. 5. 4. 00:39",
      "tags": [
        "DNS",
        "LLMNR",
        "systemd-resolved",
        "도메인",
        "호스트네임",
        "호스트명"
      ],
      "category": "",
      "excerpt": "",
      "summary": "앞으로 티스토리 대신 blog.stackframe.dev에서 블로깅을 합니다 로컬 네트워크 내에서 일일히 IP를 적어서 연결하는 것은 귀찮은 일입니다 그렇다고 네트워크에 DNS 서버를 설치하는 것도 배보다 배꼽이 큰 것 같습니다",
      "word_count": 1442
    },
    {
      "url": "https://stackframe.tistory.com/37",
      "title": "stackframe",
      "content": "앞으로 티스토리 대신 blog.stackframe.dev에서 블로깅을 합니다. 이 블로그는 남겨 둘 예정입니다.\n\n\n\n\n\n\n\n\n\n리눅스는 프로그램에서 에러가 나서 크래시되면 coredump 파일을 남기게 할 수 있습니다. 옛날에만 해도 ulimit에 coredump를 남기지 않도록 기본설정이 되어있어서 에러를 확인하고 싶어도 정보가 없었던 적도 있었습니다. 하지만 init에 systemd가 채용되면서 단순히 파일만 남기는게 아니라 systemd가 해당 에러의 내용과 coredump 파일, 시간 등의 기록을 남기는 역할도 맡게 되었습니다.\n \nsystemd는 이 기록들을 조회하고 관리하기위해 coredumpctl 이란 명령을 제공합니다.\n그냥 해당 명령을 실행하면 지금까지 있었던 기록들을 보여줍니다.\n\n\n참고로 이 기록은 journalctl과 연동됩니다. 사용자가 시스템 전반의 journal에 접근할 권한이 없다면 자신의 coredump 기록만 표시됩니다.\n \ncoredumpctl은 아래와 같은 인자를 받습니다.\n$ coredumpctl [옵션] [명령] [필터]\n옵션은 별로 쓸 일은 없을거라 생각되지만 그나마 쓰일 수 있는 몇 가지만 설명하겠습니다.\n-1 : 마지막 하나의 coredump 데이터만 가져옵니다.\n-S, --since : 시작 날짜를 지정합니다.\n-U, --until : 종료 날짜를 지정합니다.\n \n한가지 중요한 점은 이 옵션들은 list와 info 명령에서만 적용됩니다. 다른 명령에서는 어떤 효과도 없습니다. 거기다 -1 옵션이 사용되거나 info 명령이면서 필터가 입력되지 않았다면 -S, -U 옵션도 무시됩니다. 저도 이게 안되는게 이상해서 소스코드를 읽어서 확인했습니다.\n \n명령은 list, info, dump, dubug가 있습니다.\n기본적으로 어떤 명령도 입력하지 않는다면 list로 작동합니다.\ninfo는 coredump의 자세한 정보를 보여줍니다. 어떤 필터도 입력되지 않았다면 최신의 coredump 정보를 가져옵니다.\n\n\ndump는 coredump를 stdout으로 내보냅니다. info와 마찬가지로 필터가 입력되지 않으면 최신의 coredump를 가져옵니다. 만약 redirection( > >>)이나 --output 옵션이 사용되지 않았다면 바이너리 데이터인 coredump를 내보내는걸 거부합니다.\n \ndebug는 coredump 데이터를 가지고 디버거를 실행합니다. 필터가 입력되지 않았다면 최신의 coredump에 대한 디버거를 실행합니다.\n\n\n제가 일부러 coredump를 발생시키고 coredumpctl debug 명령을 실행한 결과입니다. 바로 gdb가 실행되고 backtrace를 통해 free_func에서 문제가 발생했다는 것을 알 수 있습니다.\n \n패턴은 PID, 프로세스 이름, 프로세스 경로, journalctl의 match 필터가 쓰입니다. journalctl 매치 필터에 대한 자세한 정보는 systemd.journal-fields(7) 맨페이지를 참고하시기 바랍니다.\n \n이 coredumpctl을 활용한다면 매번 gdb에 물려놓고 다시 크래시 날 때까지 문제상황을 재구성하는 시간 낭비를 줄일 수 있을거라 생각됩니다.\n\n\n\n\n공유하기\n\n게시글 관리\n\n\nstackframe \n\n\n저작자표시 비영리\n\n(새창열림)\n\n\n \n\n\n\n'Linux > systemd' 카테고리의 다른 글\n\n\nsystemd 유닛 설정 수정하기  (0)\n2020.07.17\n\n\nsystemd-resolved로 LLMNR 사용하기  (0)\n2020.05.04\n\n\nsystemd-networkd로 SIT 터널링 설정하기  (0)\n2020.05.01\n\n\nsystemd-boot를 부트로더로 사용하기  (0)\n2020.04.28\n\n\nsystemd로 시스템 자원 제한하기  (6)\n2019.01.09",
      "date": "2020. 5. 1. 23:13",
      "tags": [
        "coredump",
        "coredumpctl",
        "Linux",
        "systemd",
        "systemd-coredump",
        "디버그",
        "디버깅",
        "리눅스",
        "코어덤프"
      ],
      "category": "",
      "excerpt": "",
      "summary": "앞으로 티스토리 대신 blog.stackframe.dev에서 블로깅을 합니다 옛날에만 해도 ulimit에 coredump를 남기지 않도록 기본설정이 되어있어서 에러를 확인하고 싶어도 정보가 없었던 적도 있었습니다 하지만 init에 systemd가 채용되면서 단순히 파일만 남기는게 아니라 systemd가 해당 에러의 내용과 coredump 파일, 시간 등의 기록을 남기는 역할도 맡게 되었습니다",
      "word_count": 1869
    },
    {
      "url": "https://stackframe.tistory.com/36",
      "title": "stackframe",
      "content": "앞으로 티스토리 대신 blog.stackframe.dev에서 블로깅을 합니다. 이 블로그는 남겨 둘 예정입니다.\n\n\n\n\n\n\n\n\n\n회사 기밀이나 개인정보가 들어있는 저장장치는 보안이 중요합니다. 기본적으로 유출이 되지 않는게 최선이지만 만일의 사태로 인해 유출이 되었을 때 데이터를 빼내지 못하게 암호화를 하는 것이 좋습니다. 리눅스에서는 커널단에서 LUKS라는 암호화 레이어를 제공하고 있습니다. 그러므로 LUKS를 사용하면 어떤 리눅스에서든지 사용가능합니다.\n \nLUKS를 사용자 단에서 조작하기 위한 프로그램으로 cryptsetup이 있습니다. 아치리눅스는 기본적으로 포함되어 있지만 다른 배포판들은 어떤지 모르겠습니다. 만약 해당 명령이 없다면 cryptsetup 패키지를 설치해야 합니다.\n \n먼저 저장장치를 LUKS로 사용하기 위해서 포맷을 해야합니다. 포맷은 아래의 명령으로 가능합니다.\n# cryptsetup --type luks2 luksFormat /dev/<암호화할 저장장치 위치>\n \n\n\n현재 최신의 LUKS 버전은 2이기 때문에 LUKS2를 사용하도록 옵션을 넣었습니다. 만약 옵션을 사용하지 않는다면 LUKS1으로 포맷됩니다.\n \n만약 해당 저장장치가 파티션이 나누어져있고 특정 파티션만 LUKS로 하고싶다면 /dev/sdb2 처럼 파티션을 지정해서 포맷하면 됩니다. 저는 그냥 귀찮아서 파티션 테이블 없이 USB 통째로 LUKS로 만들었습니다. 리눅스 device mapper는 상당히 창의적으로 활용이 가능하기 때문에 LVM 위의 논리적 볼륨에 LUKS를 각각 적용하거나 LUKS 위에 LVM을 구성하고 사용하는 것도 가능합니다.\n \n이제 암호화된 장치가 생겼고 암호화와 복호화를 담당하는 레이어를 통하여 사용해야 합니다. 이 레이어를 통하는 가상의 장치를 만들면 일반 장치처럼 사용하여도 물리 장치에는 암호화되어 저장됩니다. 이를 생성하기 위한 명령은 아래와 같습니다.\n# cryptsetup open /dev/<암호화된 저장장치> <가상장치 이름>\n \n\n\n원래 LUKS 장치를 열기위한 luksOpen 이란 액션이 있지만 open 액션의 기본 옵션이 --type luks이고 버전은 알아서 인식하기 때문에 그냥 open 하셔도 됩니다. 비밀번호를 올바르게 입력했다면 /dev/mapper에 마지막 인자로 준 가상장치 이름의 블록 디바이스가 생성됩니다. 이 가상장치를 통해서 일반 장치처럼 마운트하여 사용하면 됩니다.\n \n마운트하기 전에 이 가상장치는 어떤 파일시스템으로도 포맷되어있지 않은 상태라 먼저 포맷을 해야합니다. 파일시스템이야 사용자 취향이나 시스템에 따라 일반 장치를 포맷하듯이 mkfs 계열 명령으로 하면 됩니다. 저는 ext4로 포맷했습니다.\n# mkfs.ext4 /dev/mapper/<가상장치 이름>\n \n\n\n이제 마운트하여 사용하시면 됩니다.\n# mount /dev/mapper/<가상장치 이름> <마운트 위치>\n암호화된 장치의 사용이 끝났다면 역순으로 해제하시면 됩니다.\n마운트 해제를 한 뒤,\n# umount <마운트 위치>\nLUKS 장치를 닫고,\n# cryptsetup close <가상장치 이름>\n저장장치를 뽑아버리거나 하시면  됩니다.\n \n만약 특정 파티션을 LUKS로 암호화하고 부팅과 종료 때 반자동으로 연결되게 하고싶다면 /etc/crypttab와 /etc/fstab을 사용하시면 됩니다. 혹시 root 파티션을 포함한 시스템 대부분을 암호화하고 싶다면 initramfs의 후크와 커널 파라미터를 추가해야 합니다. 이것은 배포판마다 설정하는 방법이 다를 수 있기 때문에 사용하시는 배포판의 위키를 보는게 좋습니다.\n \n참고로 LUKS는 복호화할 수 있는 비밀번호를 하나 이상 만들 수 있습니다. 각 비밀번호는 Key Slot이라 부르고 LUKS1은 최대 8개, LUKS2는 32개까지 추가할 수 있습니다. 이 Key Slot을 추가, 삭제, 변경하기 위해 luksAddKey, luksRemoveKey, luksChangeKey 액션이 사용됩니다.\n# cryptsetup luksAddKey /dev/<암호화된 저장장치>\n# cryptsetup luksRemoveKey /dev/<암호화된 저장장치>\n# cryptsetup luksChangeKey /dev/<암호화된 저장장치>\n \n\n\n\n\n공유하기\n\n게시글 관리\n\n\nstackframe \n\n\n저작자표시 비영리\n\n(새창열림)\n\n\n \n\n\n\n'Linux' 카테고리의 다른 글\n\n\nIPv6 주소로 SFTP 접속하는 방법  (0)\n2020.05.01\n\n\n라데온 그래픽카드로 듀얼 모니터를 사용하는 리눅스에서 깜빡임 현상  (0)\n2019.09.04\n\n\n리눅스에서 라데온 GPU 전력 제한하는 방법  (0)\n2019.08.11\n\n\n리눅스에서 Radeon GPU 클럭, 전압 조정하기  (0)\n2019.08.10\n\n\n[Linux] QEMU 가상머신에 OS 설치하기  (0)\n2019.06.25",
      "date": "2020. 5. 1. 16:54",
      "tags": [
        "cryptsetup",
        "Linux",
        "Luks",
        "리눅스",
        "암호화"
      ],
      "category": "",
      "excerpt": "",
      "summary": "앞으로 티스토리 대신 blog.stackframe.dev에서 블로깅을 합니다 회사 기밀이나 개인정보가 들어있는 저장장치는 보안이 중요합니다 기본적으로 유출이 되지 않는게 최선이지만 만일의 사태로 인해 유출이 되었을 때 데이터를 빼내지 못하게 암호화를 하는 것이 좋습니다",
      "word_count": 2403
    },
    {
      "url": "https://stackframe.tistory.com/35",
      "title": "stackframe",
      "content": "앞으로 티스토리 대신 blog.stackframe.dev에서 블로깅을 합니다. 이 블로그는 남겨 둘 예정입니다.\n\n\n\n\n\n\n\n\n\n저는 내부 네트워크에 속한 서버는 IPv6 Link-local 주소를 통해 관리합니다. 그런데 SSH는 IPv6를 그대로 입력해도 알아서 잘 연결이 되는데 SFTP는 IPv6 주소를 자꾸 도메인으로 해석하려해서 접속이 안되는 문제가 있습니다.\n\n\nSSH와는 다르게 SFTP는 IPv6 주소가 오면 대괄호 []로 IPv6 주소를 감싸줘야 제대로 인식됩니다. 그러므로 다음과 같이 해야 접속이 가능합니다.\nsftp root@[fe80::decd:efff:fc1a:ffff%eth0]\n \n저는 보통 계정명은 동일하게 설정해두기 때문에 @을 생략하고 IP 주소만 적어서 접속하는 것을 선호합니다. 그런데 또 특이하게도 계정은 적지 않고 대괄호만 씌워서 접속을 하려하면 또 안됩니다. 이 경우는 대괄호를 escape 처리해야만 제대로 접속됩니다.\nsftp \\[fe80::decd:efff:fc1a:ffff%eth0]\n저 대괄호 중 하나만 escape 처리해도 IPv6를 제대로 인식합니다.\n\n\n\n\n공유하기\n\n게시글 관리\n\n\nstackframe \n\n\n저작자표시 비영리\n\n(새창열림)\n\n\n \n\n\n\n'Linux' 카테고리의 다른 글\n\n\n[Linux] LUKS로 저장장치 암호화하기  (3)\n2020.05.01\n\n\n라데온 그래픽카드로 듀얼 모니터를 사용하는 리눅스에서 깜빡임 현상  (0)\n2019.09.04\n\n\n리눅스에서 라데온 GPU 전력 제한하는 방법  (0)\n2019.08.11\n\n\n리눅스에서 Radeon GPU 클럭, 전압 조정하기  (0)\n2019.08.10\n\n\n[Linux] QEMU 가상머신에 OS 설치하기  (0)\n2019.06.25",
      "date": "2020. 5. 1. 14:18",
      "tags": [
        "IPv6",
        "SFTP",
        "SSH",
        "링크로컬"
      ],
      "category": "",
      "excerpt": "",
      "summary": "앞으로 티스토리 대신 blog.stackframe.dev에서 블로깅을 합니다 저는 내부 네트워크에 속한 서버는 IPv6 Link-local 주소를 통해 관리합니다 그런데 SSH는 IPv6를 그대로 입력해도 알아서 잘 연결이 되는데 SFTP는 IPv6 주소를 자꾸 도메인으로 해석하려해서 접속이 안되는 문제가 있습니다",
      "word_count": 874
    },
    {
      "url": "https://stackframe.tistory.com/32",
      "title": "stackframe",
      "content": "앞으로 티스토리 대신 blog.stackframe.dev에서 블로깅을 합니다. 이 블로그는 남겨 둘 예정입니다.\n\n\n\n저도 리눅스 입문을 우분투로 했기 때문에 처음 부트로더로 사용한 것은 GRUB2였습니다. 초기에는 딱히 만질줄도 모르고 수정할 일도 없었기에 설치된 그대로 사용하였지만 리눅스에 익숙해지고 커널 파라미터를 넣거나 커스텀 커널을 사용하려니 너무 설정하기 복잡했습니다. 그러다가 아치리눅스로 넘어오고 systemd-boot를 알게 되었습니다.\n \nsystemd-boot는 굉장히 심플하며 최소한의 기능만 들어있습니다. 그래서 GRUB2과 비교한다면 빈약하고 제약사항이 많다고도 할 수 있습니다. 그럼에도 불구하고 제가 사용하는 이유는 설정의 편리함 때문입니다. GRUB2은 /etc/default/grub, /etc/grub.d/ 등의 설정을 만져주고 업데이트를 실행해야만 비로소 적용됩니다. 그 설정파일도 쉘코드로 되어있는 것도 있어서 필요한 부분을 찾다보면 머리아픕니다. 그에 반해 systemd-boot는 <파티션 마운트 위치>/loader/entries/ 디렉토리에 간단한 설정파일만 넣으면 해당 설정으로 부팅하는 엔트리가 만들어지고 설정은 끝납니다.\n \n설치하기 전에 먼저 systemd-boot의 제약사항을 설명하겠습니다. systemd-boot는 UEFI 지원되는 메인보드에서만 작동하며 설치되는 파티션 포맷은 FAT32이어야 합니다. 메인보드가 다른 파티션 타입을 지원한다면 그걸 사용할 수도 있겠지만 UEFI 스펙으로 FAT 타입을 필수적으로 지원해야하니 괜히 다른걸로 고생하지말고 순순히 FAT32로 합시다.\n그리고 설치되는 저장장치의 파티션 테이블은 GPT여야 합니다. MBR도 사용가능할 수 있지만 최근 Windows도 GPT를 기본적으로 사용하고 어떤 에로사항이 생길지 모르니 더 좋은 GPT로 합시다.\n마지막으로 가장 중요한 제약사항은 systemd-boot가 설치된 파티션 밖에 인식하지 못합니다. 그러므로 다른 파티션에 있는 리눅스 커널 이미지를 로드할 수 없고, windows의 부트 매니저 efi 파일도 동일한 파티션에 존재해야 systemd-boot를 통해 윈도우즈로 부팅할 수 있습니다.\n \n본격적으로 설치를 시작하겠습니다. 먼저 설치할 저장장치에 파티션 하나를 생성하고 FAT32로 포맷합니다.\n\n\n저는 256MiB를 할당했지만 반 이상이 낭비되고 있습니다. 아치리눅스와 윈도우즈 부트 매니저만 들어있을 때 이 정도이지만 우분투같은 경우는 업데이트 할 때마다 이전 커널과 initramfs를 그대로 남겨두기 때문에 넉넉하게 잡아주는게 정신건강에 이로울 것 같습니다.\n파티션을 만들고 플래그 설정을 해줘야 합니다. 해당 파티션이 boot, esp 플래그가 설정되어야 메인보드에서 인식합니다.\n\n\ngparted 기준으로 만들어진 파티션을 우클릭하면 플래그를 설정하는 옵션이 있습니다.\n \n이제 이 파티션을 어딘가에 마운트하고 systemd-boot를 설치해줍니다.\n# bootctl --esp-path=<마운트 디렉토리> install\n \n부트로더 설치는 끝났습니다. 보통 리눅스 배포판들은 /boot 디렉토리에 커널 이미지와 initramfs를 설치하니 이후에 부팅했을 때 /boot로 마운트될 수 있도록 /etc/fstab에 설정해줍시다. (아치리눅스 설치 설명대로 따라한다면 genfstab 이 알아서 만들어주니 손댈 일도 없겠지만 보편적으로 응용할 수 있는 방법으로 적다보니 약간 복잡해지는 감이 있습니다...)\n \n설치가 완료되었으니 이제 설정을 해야합니다. 부트로더 자체의 설정은 <마운트 디렉토리>/loader/loader.conf 에서 합니다.\n옵션이 몇 개 있지만 timeout, editor, default 만 설정해도 무방합니다.\ntimeout 3\ndefault archlinux\neditor no\n저는 위의 설정을 사용하고 있습니다.\ntimeout은 몇 초 뒤에 자동으로 선택된 엔트리로 부팅할 지 설정합니다.\ndefault는 뒤에서 설정할 엔트리 중에 어떤 엔트리를 기본 선택으로 할 지 설정합니다.\neditor는 부트로더에서 엔트리 수정 기능을 사용 가능하게 할 지 설정합니다. 저는 다른 사람이 무단으로 설정을 바꾸는걸 막기위해 no로 했습니다.\n \n부트로더에 표시될 각 엔트리에 대한 설정은 <마운트 디렉토리>/loader/entries/*.conf 로 저장되어야 합니다. 여기서 * 부분에 들어가는 문자열이 위의 default 옵션값으로 쓰입니다. 그러므로 저는 archlinux.conf 라는 엔트리 설정 파일을 사용하여 아치리눅스를 기본 부팅 엔트리로 설정한 것입니다.\n \n이 엔트리 설정 파일은 title, linux, initrd, options 옵션만 알면 됩니다. 먼저 제 설정을 예로 보여드리겠습니다.\ntitle Arch Linux\nlinux /vmlinuz-linux\ninitrd /intel-ucode.img\ninitrd /initramfs-linux.img\noptions rd.luks.name=<파티션 UUID>=root root=/dev/mapper/root\ntitle은 부트로더에 표시될 엔트리명을 나타냅니다.\nlinux는 리눅스의 커널 이미지 경로를 값으로 받습니다. systemd-boot가 설치된 파티션을 / 로 합니다.\ninitrd는 initramfs와 CPU의 마이크로코드 경로를 값으로 받습니다. 주의할 점은 마이크로코드가 initramfs보다 먼저 나와야합니다.\noptions는 커널 파라미터를 설정하는데 사용됩니다. 저는 기본적으로 암호화된 파티션을 사용하고 있어서 rd.luks.name이란 파라미터를 사용했지만 암호화를 사용하지 않다면 root= 만 사용하면 됩니다. 대신 root=PARTUUID=<root 파티션 UUID> 로 설정해서 고정적인 값으로 root 파티션을 지정하는게 안정적입니다. 파티션 UUID는 gparted 등으로 확인할 수 있습니다.\n \n이제 리부팅하고 메인보드 설정에 들어가서 systemd-boot EFI를 기본 부팅으로 지정하면 systemd-boot 부트로더를 볼 수 있습니다.\n \n추가적으로 Windows의 boot manager EFI가 위의 파티션에 들어있다면 systemd-boot가 알아서 인식하고 windows boot manager를 엔트리로 띄워줍니다.\n\n\n\n\n\n\n\n\n\n\n공유하기\n\n게시글 관리\n\n\nstackframe \n\n\n저작자표시 비영리\n\n(새창열림)\n\n\n \n\n\n\n'Linux > systemd' 카테고리의 다른 글\n\n\n[Linux] coredumpctl로 크래시 디버깅하기  (0)\n2020.05.01\n\n\nsystemd-networkd로 SIT 터널링 설정하기  (0)\n2020.05.01\n\n\nsystemd로 시스템 자원 제한하기  (6)\n2019.01.09\n\n\nsystemd 사용자 유닛 만들기  (0)\n2019.01.09\n\n\n리눅스 시스템 시간 동기화하기  (0)\n2018.12.30",
      "date": "2020. 4. 28. 22:36",
      "tags": [
        "Linux",
        "systemd",
        "systemd-boot",
        "리눅스",
        "부트로더"
      ],
      "category": "",
      "excerpt": "",
      "summary": "초기에는 딱히 만질줄도 모르고 수정할 일도 없었기에 설치된 그대로 사용하였지만 리눅스에 익숙해지고 커널 파라미터를 넣거나 커스텀 커널을 사용하려니 너무 설정하기 복잡했습니다 그러다가 아치리눅스로 넘어오고 systemd-boot를 알게 되었습니다 systemd-boot는 굉장히 심플하며 최소한의 기능만 들어있습니다",
      "word_count": 3391
    }
  ]
}